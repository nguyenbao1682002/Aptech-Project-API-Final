// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ObjectBussiness;

#nullable disable

namespace ObjectBussiness.Migrations
{
    [DbContext(typeof(PetroleumBusinessDBContext))]
    partial class PetroleumBusinessDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ObjectBussiness.Account", b =>
                {
                    b.Property<int>("AccountID")
                        .HasColumnType("int");

                    b.Property<int>("ExamID")
                        .HasColumnType("int");

                    b.Property<int>("ExamRegisterID")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AccountID");

                    b.HasIndex("ExamID");

                    b.HasIndex("ExamRegisterID")
                        .IsUnique();

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            AccountID = 1,
                            ExamID = 1,
                            ExamRegisterID = 1,
                            Password = "Admin@123.cntt"
                        });
                });

            modelBuilder.Entity("ObjectBussiness.Decentralization", b =>
                {
                    b.Property<int>("DecentralizationID")
                        .HasColumnType("int");

                    b.Property<int>("AccountID")
                        .HasColumnType("int");

                    b.Property<DateTime>("RoleGrantDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RoleID")
                        .HasColumnType("int");

                    b.HasKey("DecentralizationID");

                    b.HasIndex("AccountID")
                        .IsUnique();

                    b.HasIndex("RoleID");

                    b.ToTable("Decentralizations");
                });

            modelBuilder.Entity("ObjectBussiness.Elect", b =>
                {
                    b.Property<int>("ElectID")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("ElectID");

                    b.ToTable("Elects");

                    b.HasData(
                        new
                        {
                            ElectID = 1,
                            Status = true
                        },
                        new
                        {
                            ElectID = 2,
                            Status = false
                        });
                });

            modelBuilder.Entity("ObjectBussiness.Exam", b =>
                {
                    b.Property<int>("ExamID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreateTest")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExamName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TimeBegin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("TimeDelay")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeEnd")
                        .HasColumnType("datetime2");

                    b.HasKey("ExamID");

                    b.ToTable("Exams");

                    b.HasData(
                        new
                        {
                            ExamID = 1,
                            DateCreateTest = new DateTime(2024, 1, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExamName = "Admin(Not select)",
                            Status = "Start",
                            TimeBegin = new DateTime(2024, 1, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TimeEnd = new DateTime(2024, 1, 14, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("ObjectBussiness.ExamRegister", b =>
                {
                    b.Property<int>("ExamRegisterID")
                        .HasColumnType("int");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDay")
                        .HasColumnType("datetime2");

                    b.Property<string>("CandidateName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlaceOfBirth")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResidentialAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ExamRegisterID");

                    b.ToTable("ExamRegister");

                    b.HasData(
                        new
                        {
                            ExamRegisterID = 1,
                            Age = 17,
                            BirthDay = new DateTime(2024, 1, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CandidateName = "Admin",
                            City = "Đà Nẵng",
                            Country = "Việt Nam",
                            Email = "admin@gmail.com",
                            Gender = true,
                            Phone = "0911040107",
                            PlaceOfBirth = "Đà Nẵng",
                            ResidentialAddress = "22 Nguyễn Thức Tự,Hoà Hải,Ngũ Hàng Sơn,Đà Nẵng"
                        });
                });

            modelBuilder.Entity("ObjectBussiness.History", b =>
                {
                    b.Property<int>("HistoryID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.HasKey("HistoryID");

                    b.ToTable("Histories");
                });

            modelBuilder.Entity("ObjectBussiness.News", b =>
                {
                    b.Property<int>("NewsID")
                        .HasColumnType("int");

                    b.Property<int>("AccountID")
                        .HasColumnType("int");

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.Property<string>("Contents")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateSubmitted")
                        .HasColumnType("datetime2");

                    b.Property<string>("Picture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortContents")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NewsID");

                    b.HasIndex("AccountID");

                    b.HasIndex("CategoryID");

                    b.ToTable("News");
                });

            modelBuilder.Entity("ObjectBussiness.NewsCategory", b =>
                {
                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryID");

                    b.ToTable("NewsCategories");

                    b.HasData(
                        new
                        {
                            CategoryID = 1,
                            CategoryName = "Gasoline Prices"
                        },
                        new
                        {
                            CategoryID = 2,
                            CategoryName = "Recruitment Jobs"
                        });
                });

            modelBuilder.Entity("ObjectBussiness.Question", b =>
                {
                    b.Property<int>("QuestionID")
                        .HasColumnType("int");

                    b.Property<string>("AnswerA")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AnswerB")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AnswerC")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AnswerD")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CorrectAnswer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateMake")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuestionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoundID")
                        .HasColumnType("int");

                    b.HasKey("QuestionID");

                    b.HasIndex("RoundID");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("ObjectBussiness.ResultCandidate", b =>
                {
                    b.Property<int>("ResultCandidateID")
                        .HasColumnType("int");

                    b.Property<int>("ElectID")
                        .HasColumnType("int");

                    b.Property<int>("ExamID")
                        .HasColumnType("int");

                    b.Property<int?>("HistoryID")
                        .HasColumnType("int");

                    b.HasKey("ResultCandidateID");

                    b.HasIndex("ElectID");

                    b.HasIndex("ExamID");

                    b.HasIndex("HistoryID");

                    b.ToTable("ResultCandidates");
                });

            modelBuilder.Entity("ObjectBussiness.Role", b =>
                {
                    b.Property<int>("RoleID")
                        .HasColumnType("int");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleID");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleID = 1,
                            RoleName = "Admin"
                        },
                        new
                        {
                            RoleID = 2,
                            RoleName = "Candidate"
                        });
                });

            modelBuilder.Entity("ObjectBussiness.Round", b =>
                {
                    b.Property<int>("RoundID")
                        .HasColumnType("int");

                    b.Property<int>("ExamID")
                        .HasColumnType("int");

                    b.Property<string>("RoundName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoundNumber")
                        .HasColumnType("int");

                    b.HasKey("RoundID");

                    b.HasIndex("ExamID");

                    b.ToTable("Rounds");
                });

            modelBuilder.Entity("ObjectBussiness.Account", b =>
                {
                    b.HasOne("ObjectBussiness.Exam", "Exam")
                        .WithMany("Account")
                        .HasForeignKey("ExamID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ObjectBussiness.ExamRegister", "ExamRegister")
                        .WithOne("Account")
                        .HasForeignKey("ObjectBussiness.Account", "ExamRegisterID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exam");

                    b.Navigation("ExamRegister");
                });

            modelBuilder.Entity("ObjectBussiness.Decentralization", b =>
                {
                    b.HasOne("ObjectBussiness.Account", "Account")
                        .WithOne("Decentralization")
                        .HasForeignKey("ObjectBussiness.Decentralization", "AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ObjectBussiness.Role", "Role")
                        .WithMany("Decentralizations")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ObjectBussiness.News", b =>
                {
                    b.HasOne("ObjectBussiness.Account", "Account")
                        .WithMany("News")
                        .HasForeignKey("AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ObjectBussiness.NewsCategory", "Category")
                        .WithMany("News")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ObjectBussiness.Question", b =>
                {
                    b.HasOne("ObjectBussiness.Round", "Round")
                        .WithMany("Questions")
                        .HasForeignKey("RoundID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Round");
                });

            modelBuilder.Entity("ObjectBussiness.ResultCandidate", b =>
                {
                    b.HasOne("ObjectBussiness.Elect", "Elect")
                        .WithMany("ResultCandidate")
                        .HasForeignKey("ElectID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ObjectBussiness.Exam", "Exam")
                        .WithMany("ResultCandidate")
                        .HasForeignKey("ExamID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ObjectBussiness.History", null)
                        .WithMany("ResultCandidates")
                        .HasForeignKey("HistoryID");

                    b.Navigation("Elect");

                    b.Navigation("Exam");
                });

            modelBuilder.Entity("ObjectBussiness.Round", b =>
                {
                    b.HasOne("ObjectBussiness.Exam", "Exam")
                        .WithMany("Round")
                        .HasForeignKey("ExamID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exam");
                });

            modelBuilder.Entity("ObjectBussiness.Account", b =>
                {
                    b.Navigation("Decentralization");

                    b.Navigation("News");
                });

            modelBuilder.Entity("ObjectBussiness.Elect", b =>
                {
                    b.Navigation("ResultCandidate");
                });

            modelBuilder.Entity("ObjectBussiness.Exam", b =>
                {
                    b.Navigation("Account");

                    b.Navigation("ResultCandidate");

                    b.Navigation("Round");
                });

            modelBuilder.Entity("ObjectBussiness.ExamRegister", b =>
                {
                    b.Navigation("Account");
                });

            modelBuilder.Entity("ObjectBussiness.History", b =>
                {
                    b.Navigation("ResultCandidates");
                });

            modelBuilder.Entity("ObjectBussiness.NewsCategory", b =>
                {
                    b.Navigation("News");
                });

            modelBuilder.Entity("ObjectBussiness.Role", b =>
                {
                    b.Navigation("Decentralizations");
                });

            modelBuilder.Entity("ObjectBussiness.Round", b =>
                {
                    b.Navigation("Questions");
                });
#pragma warning restore 612, 618
        }
    }
}
